version: '3.9'

networks:
  network1:
    name: katana-network

services:
  rabbitmq:
    image: thinking/rabbitmq-service
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile
    container_name: rabbitmq-service
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./volumes/rabbitmq/etc/:/etc/backend/
      - ./volumes/rabbitmq/data/:/var/lib/backend/
      - ./volumes/rabbitmq/logs/:/var/log/backend/
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=welcome1
      - RABBITMQ_NODENAME=rabbitnode@localhost
      - RABBITMQ_USER=skipper
      - RABBITMQ_PASSWORD=welcome1
    networks:
      - network1
    restart: always

  logger:
    image: thinking/skipper-logger
    build:
      context: ./logger
      dockerfile: Dockerfile
    container_name: skipper-logger
    ports:
      - 5001:5001
    networks:
      - network1

  workflow:
    image: thinking/skipper-workflow
    build:
      context: ./workflow
      dockerfile: Dockerfile
    container_name: skipper-workflow
    ports:
      - 5000:5000
    environment:
      - LOGGER_URL=http://logger:5001/api/v1/skipper/logger/log_workflow
    networks:
      - network1

  api:
    image: thinking/skipper-api
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: skipper-api
    command: uvicorn endpoint:app --port=8000 --host 0.0.0.0
    ports:
      - 8000:8000
    environment:
      - WORKFLOW_URL=http://workflow:5000/api/v1/skipper/workflow/
      - LOGGER_PRODUCER_URL=http://logger:5001/api/v1/skipper/logger/log_producer
      - RABBITMQ_BROKER=pyamqp://skipper:welcome1@rabbitmq//
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=skipper
      - RABBITMQ_PASSWORD=welcome1
    networks:
      - network1
    depends_on:
      - rabbitmq
    restart: on-failure

  api-celery:
    image: thinking/skipper-api-celery
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: skipper-api-celery
    command: celery -A api.worker worker --loglevel=INFO
    environment:
      - WORKFLOW_URL=http://workflow:5000/api/v1/skipper/workflow/
      - LOGGER_PRODUCER_URL=http://logger:5001/api/v1/skipper/logger/log_producer
      - RABBITMQ_BROKER=pyamqp://skipper:welcome1@rabbitmq//
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=skipper
      - RABBITMQ_PASSWORD=welcome1
    networks:
      - network1
    depends_on:
      - api
    restart: on-failure

  postgres:
    container_name: postgres-service
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: test_db
    ports:
      - "5432:5432"
    networks:
      - network1
    restart: always

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4-service
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"
    networks:
      - network1
    restart: always

  backend:
    image: thinking/backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend-service
    volumes:
      - './backend/:/usr/src/backend'
    ports:
      - 9999:9999
    networks:
      - network1
    restart: always
    
  frontend:
    image: thinking/frontend
    container_name: frontend-service
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - './frontend/app/:/usr/src/app'
    ports:
      - 3000:3000
    stdin_open: true
    working_dir: /usr/src/app
    command: npm start
    networks:
      - network1
    depends_on:
      - backend
    restart: always

  label-studio:
    image: heartexlabs/label-studio:1.3.0
    container_name: label-studio
    volumes:
      - ./volumes/label-studio/data/:/label-studio/data:rw
    ports:
      - 8989:8080
    networks:
      - network1
    restart: always

  nginx:
    image: nginx:latest
    ports:
      - "8080:8080"
    volumes:
      - ./nginx_config.conf:/etc/nginx/conf.d/default.conf
    networks:
      - network1
    depends_on:
      - api

  # Sample set of services, you should replace with your own services
  # use any new queue name in queue environment variables as long as producer and consumer names match. 
  data-service:
    image: thinking/data-service
    build:
      context: ./services/dataservice
      dockerfile: Dockerfile
    container_name: data-service
    volumes:
      - ./services/models/:/usr/src/dataservice/models:rw
    environment:
      - LOGGER_RECEIVER_URL=http://logger:5001/api/v1/skipper/logger/log_receiver
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=skipper
      - RABBITMQ_PASSWORD=welcome1
      - QUEUE_NAME=skipper_data_custom_queue
      - SERVICE_NAME=data
      - STATS_FILE=/usr/src/dataservice/models/train_stats.csv
    networks:
      - network1
    depends_on:
      - rabbitmq
    restart: on-failure

  training-service:
    image: thinking/training-service
    build:
      context: ./services/trainingservice
      dockerfile: Dockerfile
    container_name: training-service
    volumes:
      - ./services/models/:/usr/src/trainingservice/models:rw
    environment:
      - LOGGER_PRODUCER_URL=http://logger:5001/api/v1/skipper/logger/log_producer
      - LOGGER_RECEIVER_URL=http://logger:5001/api/v1/skipper/logger/log_receiver
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=skipper
      - RABBITMQ_PASSWORD=welcome1
      - QUEUE_NAME=skipper_training
      - SERVICE_NAME=training
      - QUEUE_NAME_DATA=skipper_data_custom_queue
      - QUEUE_NAME_STORAGE=skipper_storage
      - MODELS_FOLDER=/usr/src/trainingservice/models/model_boston_
      - STATS_FILE=/usr/src/trainingservice/models/train_stats.csv
    networks:
      - network1
    depends_on:
      - rabbitmq
    restart: on-failure

  serving-service:
    image: thinking/serving-service
    build:
      context: ./services/servingservice
      dockerfile: Dockerfile
    container_name: serving-service
    volumes:
      - ./services/models/:/usr/src/servingservice/models:rw
    environment:
      - LOGGER_RECEIVER_URL=http://logger:5001/api/v1/skipper/logger/log_receiver
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=skipper
      - RABBITMQ_PASSWORD=welcome1
      - QUEUE_NAME=skipper_serving
      - SERVICE_NAME=serving
      - MODELS_FOLDER=/usr/src/servingservice/models/serving/
    networks:
      - network1
    depends_on:
      - rabbitmq
    restart: on-failure

  storage-service:
    image: thinking/storage-service
    build:
      context: ./services/servingservice/storage
      dockerfile: Dockerfile
    container_name: storage-service
    volumes:
      - ./services/models/serving/:/usr/src/servingservice/storage/models/serving:rw
    environment:
      - LOGGER_RECEIVER_URL=http://logger:5001/api/v1/skipper/logger/log_receiver
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=skipper
      - RABBITMQ_PASSWORD=welcome1
      - QUEUE_NAME=skipper_storage
      - SERVICE_NAME=serving
      - MODELS_FOLDER=/usr/src/servingservice/storage/models/serving/
    networks:
      - network1
    depends_on:
      - rabbitmq
    restart: on-failure
